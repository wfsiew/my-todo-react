{"version":3,"sources":["constants/index.js","shared/storage.js","reducers/todos.js","reducers/index.js","containers/Input.js","actions/index.js","components/Todo.js","components/TodoList.js","containers/List.js","App.js","serviceWorker.js","index.js"],"names":["ACTION","ADD_TODO","TOGGLE_TODO","DELETE_TODO","SET_EDIT","CANCEL_EDIT","UPDATE_TODO","lastid","saveTodo","todos","localStorage","setItem","JSON","stringify","id","state","arguments","length","undefined","lx","getItem","parse","getTodos","action","type","list","concat","Object","toConsumableArray","text","completed","isEdit","editText","toString","map","todo","objectSpread","filter","combineReducers","Input","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","value","handleSubmit","preventDefault","trim","addTodo","react_default","a","createElement","className","onSubmit","name","onChange","placeholder","disabled","Component","connect","dispatch","Todo","handleKeyPress","key","deleteTodo","stopPropagation","editTodo","updateTodo","cancelEditTodo","_this$props","toggleComplete","onClick","style","textDecoration","onKeyPress","TodoList","components_Todo","App","Fragment","containers_Input","List","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.082aa02e.chunk.js","sourcesContent":["export const ACTION = {\r\n  ADD_TODO: 'ADD_TODO',\r\n  TOGGLE_TODO: 'TOGGLE_TODO',\r\n  DELETE_TODO: 'DELETE_TODO',\r\n  SET_EDIT: 'SET_EDIT',\r\n  CANCEL_EDIT: 'CANCEL_EDIT',\r\n  UPDATE_TODO: 'UPDATE_TODO'\r\n}","let lastid = 0;\r\nlet todos = [];\r\n\r\nexport function getLastId() {\r\n  let id = localStorage.getItem('lastid');\r\n  if (!id) {\r\n    lastid = 0;\r\n  }\r\n\r\n  return ++lastid;\r\n}\r\n\r\nexport function getTodos() {\r\n  let lx = localStorage.getItem('todos');\r\n  if (!lx) {\r\n    todos = [];\r\n  }\r\n\r\n  else {\r\n    todos = JSON.parse(lx);\r\n  }\r\n\r\n  return todos;\r\n}\r\n\r\nexport function saveLastId(id) {\r\n  localStorage.setItem('lastid', id.toString());\r\n}\r\n\r\nexport function saveTodo(todos) {\r\n  localStorage.setItem('todos', JSON.stringify(todos));\r\n}","import { ACTION } from '../constants';\r\nimport { getTodos, saveLastId, saveTodo } from '../shared/storage';\r\n\r\nfunction todos(state = getTodos(), action) {\r\n  if (action.type === ACTION.ADD_TODO) {\r\n    let list = [\r\n      ...state,\r\n      {\r\n        id: action.id,\r\n        text: action.text,\r\n        completed: false,\r\n        isEdit: false,\r\n        editText: action.text\r\n      }\r\n    ];\r\n    saveLastId(action.id);\r\n    saveTodo(list);\r\n    return list;\r\n  }\r\n\r\n  else if (action.type === ACTION.TOGGLE_TODO) {\r\n    let list = state.map(todo =>\r\n      todo.id === action.id ? { ...todo, completed: !todo.completed } : todo);\r\n    saveTodo(list);\r\n    return list;\r\n  }\r\n\r\n  else if (action.type === ACTION.DELETE_TODO) {\r\n    let list = state.filter(todo => todo.id !== action.id);\r\n    saveTodo(list);\r\n    return list;\r\n  }\r\n\r\n  else if (action.type === ACTION.SET_EDIT) {\r\n    let list = state.map(todo => \r\n      todo.id === action.id ? { ...todo, isEdit: action.isEdit } : todo);\r\n    saveTodo(list);\r\n    return list;\r\n  }\r\n\r\n  else if (action.type === ACTION.CANCEL_EDIT) {\r\n    let list = state.map(todo => \r\n      todo.id === action.id ? { ...todo, isEdit: action.isEdit } : todo);\r\n    saveTodo(list);\r\n    return list;\r\n  }\r\n\r\n  else if (action.type === ACTION.UPDATE_TODO) {\r\n    let list = state.map(todo =>\r\n      todo.id === action.id ? { ...todo, isEdit: action.isEdit, text: action.text, editText: action.text } : todo);\r\n    saveTodo(list);\r\n    return list;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default todos;","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\n\r\nexport default combineReducers({\r\n  todos\r\n});","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../actions';\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addTodo: todo => dispatch(addTodo(todo))\r\n  };\r\n}\r\n\r\nclass Input extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todo: ''\r\n    }\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (!this.state.todo.trim()) return;\r\n    this.props.addTodo(this.state.todo);\r\n    this.setState({ todo: '' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mt-2\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group row\">\r\n            <div className=\"col-md-12 input-group\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"todo\"\r\n                name=\"todo\"\r\n                value={this.state.todo}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Type in a new todo\" \r\n                className=\"form-control\"\r\n              />\r\n              <div className=\"input-group-append\">\r\n                <button type=\"submit\" disabled={this.state.todo === ''} className=\"btn btn-primary\">Add Todo</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Input);","import { ACTION } from '../constants';\r\nimport { getLastId } from '../shared/storage';\r\n\r\nexport function addTodo(text) {\r\n  return {\r\n    type: ACTION.ADD_TODO,\r\n    id: getLastId(),\r\n    text: text\r\n  }\r\n}\r\n\r\nexport function toggleComplete(id) {\r\n  return {\r\n    type: ACTION.TOGGLE_TODO,\r\n    id: id\r\n  }\r\n}\r\n\r\nexport function deleteTodo(id) {\r\n  return {\r\n    type: ACTION.DELETE_TODO,\r\n    id: id\r\n  }\r\n}\r\n\r\nexport function editTodo(id) {\r\n  return {\r\n    type: ACTION.SET_EDIT,\r\n    id: id,\r\n    isEdit: true\r\n  }\r\n}\r\n\r\nexport function cancelEditTodo(id) {\r\n  return {\r\n    type: ACTION.CANCEL_EDIT,\r\n    id: id,\r\n    isEdit: false\r\n  }\r\n}\r\n\r\nexport function updateTodo(id, text) {\r\n  return {\r\n    type: ACTION.UPDATE_TODO,\r\n    id: id,\r\n    isEdit: false,\r\n    text: text\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nclass Todo extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: this.props.text\r\n    }\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ text: e.target.value });\r\n  }\r\n\r\n  handleKeyPress = e => {\r\n    if (e.key === 'Enter') {\r\n      this.saveTodo();\r\n    }\r\n  }\r\n\r\n  deleteTodo = e => {\r\n    e.stopPropagation();\r\n    this.props.deleteTodo();\r\n  }\r\n\r\n  editTodo = e => {\r\n    e.stopPropagation();\r\n    this.props.editTodo();\r\n  }\r\n\r\n  saveTodo = () => {\r\n    if (!this.state.text.trim()) return;\r\n    this.props.updateTodo(this.state.text);\r\n    this.props.cancelEditTodo();\r\n  }\r\n\r\n  cancelEditTodo = () => {\r\n    this.setState({ text: this.props.text });\r\n    this.props.cancelEditTodo();\r\n  }\r\n\r\n  render() {\r\n    const { toggleComplete, isEdit, completed, text } = this.props;\r\n    return (\r\n      <li className=\"list-group-item\">\r\n        {!isEdit && (\r\n          <div onClick={toggleComplete} style={{\r\n            textDecoration: completed ? 'line-through' : 'none'\r\n            }}>\r\n            <div className=\"mr-2 d-inline\">{text}</div>\r\n            <div className=\"float-right\">\r\n              <button onClick={this.deleteTodo} className=\"btn btn-danger mr-2\">Delete</button>\r\n              <button onClick={this.editTodo} className=\"btn btn-success\">Edit</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {isEdit && (\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6\">\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.text}\r\n                onChange={this.handleChange}\r\n                onKeyPress={this.handleKeyPress}\r\n                placeholder=\"title\"\r\n                className=\"form-control\"\r\n              />\r\n            </div>\r\n            <div className=\"col-sm-4\">\r\n              <button onClick={this.saveTodo} disabled={this.state.text === ''} className=\"btn btn-success mr-2\">Save</button>\r\n              <button onClick={this.cancelEditTodo} className=\"btn btn-secondary\">Cancel</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\n\r\nclass TodoList extends Component {\r\n\r\n  render() {\r\n    const { todos, toggleComplete, deleteTodo, editTodo, updateTodo, cancelEditTodo } = this.props;\r\n    if (!todos.length) {\r\n      return (\r\n        <div className=\"alert alert-info\">\r\n          <div className=\"text-center\">Your TODO is empty</div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    else {\r\n      return (\r\n        <ul className=\"list-group\">\r\n          {\r\n            todos.map(todo => (\r\n              <Todo key={todo.id}\r\n                text={todo.text}\r\n                editText={todo.editText}\r\n                isEdit={todo.isEdit}\r\n                completed={todo.completed}\r\n                toggleComplete={() => toggleComplete(todo.id)}\r\n                deleteTodo={() => deleteTodo(todo.id)}\r\n                editTodo={() => editTodo(todo.id)}\r\n                updateTodo={(text) => updateTodo(todo.id, text)}\r\n                cancelEditTodo={() => cancelEditTodo(todo.id)}\r\n              />\r\n            ))\r\n          }\r\n        </ul>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default TodoList;","import { connect } from 'react-redux';\r\nimport { toggleComplete, deleteTodo, editTodo, updateTodo, cancelEditTodo } from '../actions';\r\nimport TodoList from '../components/TodoList';\r\n\r\nfunction getTodos(todos) {\r\n  return todos;\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    todos: getTodos(state.todos)\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    toggleComplete: id => dispatch(toggleComplete(id)),\r\n    deleteTodo: id => dispatch(deleteTodo(id)),\r\n    editTodo: id => dispatch(editTodo(id)),\r\n    updateTodo: (id, text) => dispatch(updateTodo(id, text)),\r\n    cancelEditTodo: id => dispatch(cancelEditTodo(id))\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList);","import React from 'react';\r\nimport Input from './containers/Input';\r\nimport List from './containers/List';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1 className=\"text-center mt-2\">Todo App</h1>\r\n      <Input />\r\n      <List />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport './custom.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}