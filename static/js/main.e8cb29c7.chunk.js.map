{"version":3,"sources":["constants/index.js","reducers/todos.js","reducers/index.js","actions/index.js","containers/Input.js","components/Todo.js","components/TodoList.js","containers/List.js","App.js","serviceWorker.js","index.js"],"names":["ACTION","ADD_TODO","TOGGLE_TODO","DELETE_TODO","SET_EDIT","CANCEL_EDIT","UPDATE_TODO","todos","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","id","text","completed","isEdit","editText","map","todo","objectSpread","filter","combineReducers","lastid","Input","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","value","handleSubmit","preventDefault","trim","addTodo","react_default","a","createElement","className","onSubmit","name","onChange","placeholder","disabled","Component","connect","dispatch","Todo","handleKeyPress","key","saveTodo","deleteTodo","stopPropagation","editTodo","updateTodo","cancelEditTodo","_this$props","toggleComplete","onClick","style","textDecoration","onKeyPress","TodoList","components_Todo","App","Fragment","class","containers_Input","List","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8cb29c7.chunk.js","sourcesContent":["export const ACTION = {\r\n  ADD_TODO: 'ADD_TODO',\r\n  TOGGLE_TODO: 'TOGGLE_TODO',\r\n  DELETE_TODO: 'DELETE_TODO',\r\n  SET_EDIT: 'SET_EDIT',\r\n  CANCEL_EDIT: 'CANCEL_EDIT',\r\n  UPDATE_TODO: 'UPDATE_TODO'\r\n}","import { ACTION } from '../constants';\r\n\r\nfunction todos(state = [], action) {\r\n  if (action.type === ACTION.ADD_TODO) {\r\n    return [\r\n      ...state,\r\n      {\r\n        id: action.id,\r\n        text: action.text,\r\n        completed: false,\r\n        isEdit: false,\r\n        editText: action.text\r\n      }\r\n    ];\r\n  }\r\n\r\n  else if (action.type === ACTION.TOGGLE_TODO) {\r\n    return state.map(todo =>\r\n      todo.id === action.id ? { ...todo, completed: !todo.completed } : todo);\r\n  }\r\n\r\n  else if (action.type === ACTION.DELETE_TODO) {\r\n    return state.filter(todo => todo.id !== action.id);\r\n  }\r\n\r\n  else if (action.type === ACTION.SET_EDIT) {\r\n    return state.map(todo => \r\n      todo.id === action.id ? { ...todo, isEdit: action.isEdit } : todo);\r\n  }\r\n\r\n  else if (action.type === ACTION.CANCEL_EDIT) {\r\n    return state.map(todo => \r\n      todo.id === action.id ? { ...todo, isEdit: action.isEdit } : todo);\r\n  }\r\n\r\n  else if (action.type === ACTION.UPDATE_TODO) {\r\n    return state.map(todo =>\r\n      todo.id === action.id ? { ...todo, isEdit: action.isEdit, text: action.text, editText: action.text } : todo);\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default todos;","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\n\r\nexport default combineReducers({\r\n  todos\r\n});","import { ACTION } from '../constants';\r\n\r\nlet lastid = 0;\r\n\r\nexport function addTodo(text) {\r\n  return {\r\n    type: ACTION.ADD_TODO,\r\n    id: ++lastid,\r\n    text: text\r\n  }\r\n}\r\n\r\nexport function toggleComplete(id) {\r\n  return {\r\n    type: ACTION.TOGGLE_TODO,\r\n    id: id\r\n  }\r\n}\r\n\r\nexport function deleteTodo(id) {\r\n  return {\r\n    type: ACTION.DELETE_TODO,\r\n    id: id\r\n  }\r\n}\r\n\r\nexport function editTodo(id) {\r\n  return {\r\n    type: ACTION.SET_EDIT,\r\n    id: id,\r\n    isEdit: true\r\n  }\r\n}\r\n\r\nexport function cancelEditTodo(id) {\r\n  return {\r\n    type: ACTION.CANCEL_EDIT,\r\n    id: id,\r\n    isEdit: false\r\n  }\r\n}\r\n\r\nexport function updateTodo(id, text) {\r\n  return {\r\n    type: ACTION.UPDATE_TODO,\r\n    id: id,\r\n    isEdit: false,\r\n    text: text\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../actions';\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addTodo: todo => dispatch(addTodo(todo))\r\n  };\r\n}\r\n\r\nclass Input extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todo: ''\r\n    }\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (!this.state.todo.trim()) return;\r\n    this.props.addTodo(this.state.todo);\r\n    this.setState({ todo: '' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mt-2\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group row\">\r\n            <div className=\"col-md-12 input-group\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"todo\"\r\n                name=\"todo\"\r\n                value={this.state.todo}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Type in a new todo...\" \r\n                className=\"form-control\"\r\n              />\r\n              <div className=\"input-group-append\">\r\n                <button type=\"submit\" disabled={this.state.todo === ''} className=\"btn btn-primary\">Add Todo</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Input);","import React, { Component } from 'react';\r\n\r\nclass Todo extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: this.props.text\r\n    }\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ text: e.target.value });\r\n  }\r\n\r\n  handleKeyPress = e => {\r\n    if (e.key === 'Enter') {\r\n      this.saveTodo();\r\n    }\r\n  }\r\n\r\n  deleteTodo = e => {\r\n    e.stopPropagation();\r\n    this.props.deleteTodo();\r\n  }\r\n\r\n  editTodo = e => {\r\n    e.stopPropagation();\r\n    this.props.editTodo();\r\n  }\r\n\r\n  saveTodo = () => {\r\n    if (!this.state.text.trim()) return;\r\n    this.props.updateTodo(this.state.text);\r\n    this.props.cancelEditTodo();\r\n  }\r\n\r\n  cancelEditTodo = () => {\r\n    this.setState({ text: this.props.text });\r\n    this.props.cancelEditTodo();\r\n  }\r\n\r\n  render() {\r\n    const { toggleComplete, isEdit, completed, text } = this.props;\r\n    return (\r\n      <li className=\"list-group-item\">\r\n        {!isEdit && (\r\n          <div onClick={toggleComplete} style={{\r\n            textDecoration: completed ? 'line-through' : 'none'\r\n            }}>\r\n            <div className=\"mr-2 d-inline\">{text}</div>\r\n            <div className=\"float-right\">\r\n              <button onClick={this.deleteTodo} className=\"btn btn-danger mr-2\">Delete</button>\r\n              <button onClick={this.editTodo} className=\"btn btn-success\">Edit</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {isEdit && (\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6\">\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.text}\r\n                onChange={this.handleChange}\r\n                onKeyPress={this.handleKeyPress}\r\n                placeholder=\"title\"\r\n                className=\"form-control\"\r\n              />\r\n            </div>\r\n            <div className=\"col-sm-4\">\r\n              <button onClick={this.saveTodo} disabled={this.state.text === ''} className=\"btn btn-success mr-2\">Save</button>\r\n              <button onClick={this.cancelEditTodo} className=\"btn btn-secondary\">Cancel</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\n\r\nclass TodoList extends Component {\r\n\r\n  render() {\r\n    const { todos, toggleComplete, deleteTodo, editTodo, updateTodo, cancelEditTodo } = this.props;\r\n    return (\r\n      <ul className=\"list-group\">\r\n        {\r\n          todos.map(todo => (\r\n            <Todo key={todo.id} \r\n              text={todo.text}\r\n              editText={todo.editText}\r\n              isEdit={todo.isEdit}\r\n              completed={todo.completed}\r\n              toggleComplete={() => toggleComplete(todo.id)}\r\n              deleteTodo={() => deleteTodo(todo.id)}\r\n              editTodo={() => editTodo(todo.id)}\r\n              updateTodo={(text) => updateTodo(todo.id, text)}\r\n              cancelEditTodo={() => cancelEditTodo(todo.id)}\r\n            />\r\n          ))\r\n        }\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoList;","import { connect } from 'react-redux';\r\nimport { toggleComplete, deleteTodo, editTodo, updateTodo, cancelEditTodo } from '../actions';\r\nimport TodoList from '../components/TodoList';\r\n\r\nfunction getTodos(todos) {\r\n  return todos;\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    todos: getTodos(state.todos)\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    toggleComplete: id => dispatch(toggleComplete(id)),\r\n    deleteTodo: id => dispatch(deleteTodo(id)),\r\n    editTodo: id => dispatch(editTodo(id)),\r\n    updateTodo: (id, text) => dispatch(updateTodo(id, text)),\r\n    cancelEditTodo: id => dispatch(cancelEditTodo(id))\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList);","import React from 'react';\nimport Input from './containers/Input';\nimport List from './containers/List';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <h1 class=\"text-center mt-2\">To-Do App</h1>\n      <Input />\n      <List />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}